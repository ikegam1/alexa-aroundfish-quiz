from chalice import Chalice
import logging

app = Chalice(app_name='alexa-aroundfish-quiz')
logger = logging.getLogger('DEBUG')

class BaseSpeech:
    def __init__(self, speech_text, should_end_session, session_attributes=None):
        """初期化処理 @app.route('/') def index():
     return {'hello': 'world'}
        引数: @app.route('/', methods=['POST'], content_types=['application/json']) def on_event():
            speech_text: Alexaに喋らせたいテキスト event = app.current_request.json_body
            should_end_session: このやり取りでスキルを終了させる場合はTrue, 続けるならFalse logger.debug(dumps(event))
            session_attributes: 引き継ぎたいデータが入った辞書 return {'hello': 'world'}
        """
        if session_attributes is None:
            session_attributes = {}
 
        # 最終的に返却するレスポンス内容。これを各メソッドで上書き・修正していく
        self._response = {
            'version': '1.0',
            'sessionAttributes': session_attributes,
            'response': {
                'outputSpeech': {
                    'type': 'SSML',
                    'ssml': '<speak>'+speech_text+'</speak>'
                },
                'shouldEndSession': should_end_session,
            },
        }
 
        # 取り出しやすいよう、インスタンスの属性に
        self.speech_text = speech_text
        self.should_end_session = should_end_session
        self.session_attributes = session_attributes
 
    def build(self):
        """最後にこのメソッドを呼んでください..."""
        return self._response
 
 
class OneSpeech(BaseSpeech):
    """1度だけ発話する(ユーザーの返事は待たず、スキル終了)"""
 
    def __init__(self, speech_text, session_attributes=None):
        super().__init__(speech_text, True, session_attributes)
 
 
class QuestionSpeech(BaseSpeech):
    """発話し、ユーザーの返事を待つ"""
 
    def __init__(self, speech_text, session_attributes=None):
        super().__init__(speech_text, False, session_attributes)
 
    def reprompt(self, text):
        """リプロンプトを追加する"""
        reprompt = {
                'type': 'PlainText',
                'text': text
        }
        self._response['response']['reprompt'] = reprompt
        return self
